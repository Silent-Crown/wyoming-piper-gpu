#!/bin/bash
# Wyoming Piper Voice Test Script (Docker Version)
#
# This script runs the voice test from within a Docker container,
# requiring no local Python dependencies.
#
# Usage: ./test_voice_docker.sh [TEXT]
#
# Author: Claude Code

set -e

# Configuration
TEXT=${1:-"Hello! This is a Docker-based test of the Wyoming Piper text to speech system. The voice you hear is being generated by the GPU-accelerated container."}
OUTPUT_FILE="test_output_docker.wav"
NETWORK_NAME="wyoming-piper-gpu_default"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_banner() {
    echo "============================================================"
    echo "     Wyoming Piper GPU Voice Test (Docker Version)"
    echo "============================================================"
}

check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        echo -e "${RED}‚úó Docker not found${NC}"
        echo "  Please install Docker to use this test script"
        return 1
    fi
    
    if ! docker info >/dev/null 2>&1; then
        echo -e "${RED}‚úó Docker daemon not running${NC}"
        echo "  Please start Docker service"
        return 1
    fi
    
    return 0
}

check_wyoming_container() {
    echo -e "${BLUE}üîç Checking Wyoming Piper container...${NC}"
    
    if ! docker ps --format "{{.Names}}" | grep -q "wyoming-piper"; then
        echo -e "${RED}‚úó Wyoming Piper container not running${NC}"
        echo "  Start with: docker-compose up -d"
        return 1
    fi
    
    local status=$(docker ps --format "{{.Names}}: {{.Status}}" | grep wyoming-piper)
    echo -e "${GREEN}‚úì $status${NC}"
    
    # Show configured voice
    if docker exec wyoming-piper env 2>/dev/null | grep -q PIPER_VOICE; then
        local voice=$(docker exec wyoming-piper env 2>/dev/null | grep PIPER_VOICE | cut -d'=' -f2)
        echo -e "${BLUE}üé§ Container voice: $voice${NC}"
    fi
    
    return 0
}

create_test_container() {
    echo -e "${BLUE}üê≥ Creating test container...${NC}"
    
    # Create a simple Python script for the container
    cat > /tmp/docker_voice_test.py << 'EOF'
#!/usr/bin/env python3
import asyncio
import sys
import wave
from wyoming.audio import AudioChunk, AudioStop
from wyoming.client import AsyncTcpClient
from wyoming.tts import Synthesize

async def test_tts(text, output_file):
    try:
        async with AsyncTcpClient("wyoming-piper", 10200) as client:
            print(f"üéµ Synthesizing: \"{text[:50]}...\"")
            
            synthesize = Synthesize(text=text)
            await client.write_event(synthesize.event())
            
            audio_data = bytearray()
            audio_params = None
            
            while True:
                event = await client.read_event()
                if event is None:
                    break
                
                if AudioStop.is_type(event.type):
                    break
                
                if AudioChunk.is_type(event.type):
                    chunk = AudioChunk.from_event(event)
                    
                    if audio_params is None:
                        audio_params = {
                            'rate': chunk.rate,
                            'width': chunk.width,
                            'channels': chunk.channels
                        }
                    
                    audio_data.extend(chunk.audio)
            
            if audio_params and audio_data:
                with wave.open(output_file, 'wb') as wav_file:
                    wav_file.setframerate(audio_params['rate'])
                    wav_file.setsampwidth(audio_params['width'])
                    wav_file.setnchannels(audio_params['channels'])
                    wav_file.writeframes(bytes(audio_data))
                
                print(f"‚úì Audio saved to: {output_file}")
                print(f"üìè Size: {len(audio_data):,} bytes")
                return True
            
    except Exception as e:
        print(f"‚úó Error: {e}")
        return False
    
    return False

if __name__ == "__main__":
    text = sys.argv[1] if len(sys.argv) > 1 else "Test message"
    success = asyncio.run(test_tts(text, "/output/test_output_docker.wav"))
    sys.exit(0 if success else 1)
EOF

    # Copy script to the container's volume if possible, otherwise embed it
    local script_path="/tmp/docker_voice_test.py"
    
    return 0
}

run_docker_test() {
    echo -e "${BLUE}üöÄ Running Docker test...${NC}"
    
    # Ensure output directory exists
    mkdir -p "$(pwd)/test_output"
    
    # Run test in a temporary container connected to the Wyoming network
    local test_result
    if docker run --rm \
        --network "$NETWORK_NAME" \
        -v "$(pwd)/test_output:/output" \
        -v "/tmp/docker_voice_test.py:/test.py" \
        python:3.11-slim \
        bash -c "
            pip install wyoming >/dev/null 2>&1 && \
            python3 /test.py '$TEXT'
        " 2>/dev/null; then
        
        test_result=0
        echo -e "${GREEN}‚úì Docker test completed successfully${NC}"
        
        # Move output file to expected location
        if [ -f "test_output/test_output_docker.wav" ]; then
            mv "test_output/test_output_docker.wav" "$OUTPUT_FILE"
            rmdir "test_output" 2>/dev/null || true
        fi
        
    else
        test_result=1
        echo -e "${RED}‚úó Docker test failed${NC}"
        rmdir "test_output" 2>/dev/null || true
    fi
    
    return $test_result
}

play_audio() {
    local file="$1"
    
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚úó Audio file not found: $file${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üîä Attempting to play audio...${NC}"
    
    # List of audio players to try
    local players=("paplay" "aplay" "ffplay -nodisp -autoexit" "cvlc --play-and-exit --intf dummy" "mpg123" "play")
    
    for player_cmd in "${players[@]}"; do
        local player=$(echo $player_cmd | cut -d' ' -f1)
        if command -v "$player" >/dev/null 2>&1; then
            echo -e "${BLUE}üéµ Using $player...${NC}"
            if $player_cmd "$file" >/dev/null 2>&1; then
                echo -e "${GREEN}‚úì Audio played successfully${NC}"
                return 0
            fi
        fi
    done
    
    echo -e "${YELLOW}‚ö†Ô∏è  No compatible audio player found${NC}"
    echo "  Install one of: paplay, aplay, ffplay, vlc, mpg123, sox"
    echo -e "${BLUE}üí° Manually play: $file${NC}"
    return 1
}

cleanup() {
    # Clean up temporary files
    rm -f /tmp/docker_voice_test.py
}

main() {
    print_banner
    
    echo -e "${BLUE}üîß Configuration:${NC}"
    echo "  Text: \"${TEXT:0:60}...\""
    echo "  Output: $OUTPUT_FILE"
    echo "  Network: $NETWORK_NAME"
    echo
    
    # Set up cleanup trap
    trap cleanup EXIT
    
    # Check Docker
    if ! check_docker; then
        exit 1
    fi
    
    # Check Wyoming container
    if ! check_wyoming_container; then
        exit 1
    fi
    
    # Create and run test
    create_test_container
    
    if run_docker_test; then
        echo
        play_audio "$OUTPUT_FILE"
        
        echo
        echo -e "${GREEN}‚úÖ Docker test completed successfully!${NC}"
        echo -e "${BLUE}üí° Audio file saved as: $OUTPUT_FILE${NC}"
        echo -e "${BLUE}   For more options, use: python3 test_voice.py --help${NC}"
    else
        echo
        echo -e "${RED}‚ùå Docker test failed${NC}"
        echo -e "${BLUE}üí° Try the Python test instead: python3 test_voice.py --play${NC}"
        exit 1
    fi
}

# Make sure we're in the script directory
cd "$(dirname "$0")"

# Run main function
main "$@"